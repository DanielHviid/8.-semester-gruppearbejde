source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
install.packages("gmodels", dependencies = T)
install.packages("ggplot2", dependencies = T)
install.packages("caret", dependencies = T)
install.packages("data.table", dependencies = T)
install.packages("jmotif", dependencies = T)
install.packages("foreach", dependencies = T)
library("jpeg")
library("EBImage")
library("class")
library("gmodels")
library("ggplot2")
library("caret")
library("data.table")
library("jmotif")
#library("lda")
ProjectLocation <- '~/Desktop/8.-semester-gruppearbejde/MachineLearning/Aflevering_2/'
setwd(ProjectLocation)
# ------------------------------- Ubuntu (Desktop)  ------------------------------------------
{
ProjectLocation <- '~/Desktop/8.-semester-gruppearbejde/MachineLearning/Aflevering_2/'
setwd(ProjectLocation)
folder <- "/media/tera/HDD/SmartSVN/trunk/2018/group"
folder <- "/media/tera/HDD/SmartSVN/trunk/preProcessed/2018/group"
}
#load relevant functions
source('includes.R')
#load relevant functions
source('includes.R')
source('functions.R')
source('loadImages.R')    # load the converted images
# ------------------------------- Ubuntu (Desktop)  ------------------------------------------
{
ProjectLocation <- '~/Desktop/8.-semester-gruppearbejde/MachineLearning/Aflevering_2/'
setwd(ProjectLocation)
folder <- "/media/tera/HDD/SmartSVN/trunk/2018/group"
folder <- "/media/tera/HDD/SmartSVN/trunk/preProcessed/2018/group"
}
# ------------------------------- Ubuntu (Desktop)  ------------------------------------------
{
ProjectLocation <- '~/Desktop/8.-semester-gruppearbejde1/MachineLearning/Aflevering_2/'
setwd(ProjectLocation)
folder <- "/media/tera/HDD/SmartSVN/trunk/2018/group"
folder <- "/media/tera/HDD/SmartSVN/trunk/preProcessed/2018/group"
}
#load relevant functions
source('includes.R')
source('functions.R')
source('loadImages.R')    # load the converted images
#--------------------------------------------
#--------------- Opgave 2.1.1.2 a - all persons in
#--------------------------------------------
data = allPersonsInSplit(id100Large)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
listOfAccuracies <- matrix(,4,3)
listOfTimes <- matrix(,4,3)
listOfTimeVariation <- matrix(,4,3)
listOfNPCs <- matrix(,4,1)
timeSamples <- matrix(,10,1)
for (i in 1:length(leastVariances))
{
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
listOfNPCs[i] = NAcceptable
reducedTraining <- data.frame(data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable]))
reducedTest <- data.frame(data.matrix(testData) %*% data.matrix(model$rotation[,1:NAcceptable]))
cat("Number of principle components: ", NAcceptable, "\n")
kValues <- list(1,10,100)
for (K in 1:length(kValues))
{
cat("K-Vakues: ", kValues[[K]], "\n")
foreach(j=1:10) %dopar% {
#loop contents here
cat("j-Vakues: ", j, "\n")
start.time <- Sys.time()
test_pred <- knn(train = reducedTraining, test = reducedTest, cl = trainingClasses, k=kValues[K])
end.time <- Sys.time()
timeSamples[j] <- end.time - start.time
}
listOfTimes[i,K] <- mean(timeSamples)
listOfTimeVariation[i,K] <- sd(timeSamples)
#resultMatrix = CrossTable(x = testClasses, y = test_pred, prop.chisq=FALSE, prop.r = FALSE, prop.c = FALSE, prop.t = FALSE);
#result = sum(diag(resultMatrix$t))/sum(resultMatrix$t)
listOfAccuracies[i,K] <- acc(test_pred,testClasses)
}
}
library(foreach)
library(doMC)
