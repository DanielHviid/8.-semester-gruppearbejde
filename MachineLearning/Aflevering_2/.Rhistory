#
# plot(cumsum(acceptableFactorVariances), ylim = c(0,1), type = "o")
#
# getAcceptableVarianceRotationalMatrix(USArrests, 0.8)
#--------------------------------------------
#--------------- Opgave 2.1.1.1
#--------------------------------------------
model <- prcomp(id100Small, center = TRUE, scale = TRUE)
plot(model$sdev[1:20], type = "o")
variance <- model$sdev^2
variance <- variance / sum(variance)
plot(variance[1:20], ylim = c(0,1), type = "o")
cumulativeVariance <- cumsum(variance)
plot(cumulativeVariance[1:20], ylim = c(0,1), type = "o")
#
# # N = 10
# #
# # dataList <- trainingSplit(data,N,1,0,true) # number of folds, size of test set, size of validation set, shuffle
# #
# # training <- dataList[1]
# # test <- dataList[2]
# #
# # model <- prComp(training)
# # model.sdev
# # bitplot(model)
# maxVariance <- 0.8
# maxfactors <- 2
#
#
#
# #res <- prcomp(id100Small)
# #summary(res)
#
# # giver Ã¥benbart et andet resultat
# #summary(prcomp(id200Small, scale = TRUE))
#
# ## signs are random
# require(graphics)
#
# ## the variances of the variables in the
# ## USArrests data vary by orders of magnitude, so scaling is appropriate
# # prcomp(USArrests)  # inappropriate
# model <- prcomp(USArrests, scale = TRUE, center = TRUE)
# model
# model$sdev
# model[1]
# model$rotation
#
# # prcomp(~ Murder + Assault + Rape, data = USArrests, scale = TRUE)
# # plot(prcomp(USArrests))
# # summary(prcomp(id100Small, scale = TRUE))
# # biplot(prcomp(USArrests, scale = TRUE))
#
# variance <- model$sdev
# variance <- variance / sum(variance)
# cumulativeVariance <- cumsum(variance)
# bestFactorVariances <- variance[1:maxfactors]
# acceptableFactorVariances <- variance[1:(length(cumulativeVariance[cumulativeVariance < maxVariance])+1)]
# NAcceptable <- length(acceptableFactorVariances)
#
# plot(cumsum(acceptableFactorVariances), ylim = c(0,1), type = "o")
#
# getAcceptableVarianceRotationalMatrix(USArrests, 0.8)
getNumberOfPrincipleComponents <- function(model, leastVariance)
{
variance <- model$sdev^2
variance <- variance / sum(variance)
cumulativeVariance <- cumsum(variance)
acceptableFactorVariances <- variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariance])+1)]
return(length(acceptableFactorVariances))
}
#-------------------------------------------------------------
# Get the rotation matrix corrosponding to at least the level of variance selected (0 to 1).'
# Returns a matrix, input is : (matrix/dataframe , number)
#-------------------------------------------------------------
getAcceptableVarianceRotationalMatrix <- function(input, leastVariance)
{
model = prcomp(input)
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariance])+1)]
NAcceptable = length(acceptableFactorVariances)
return (model$rotation[,1:NAcceptable])
}
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
print(leastVariance[i])
rotationalMatrix <- getAcceptableVarianceRotationalMatrix(model, leastVariances[i])
reducedTraining <- training %*% rotationalMatrix
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
reducedTraining <- training %*% model$rotation[,1:NAcceptable]
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
x = matrix(1:4,2,2)
y = x
x = matrix(1:4,2,2)
y = data.frame(x)
y %*% x
x = matrix(1:4,2,2)
y = data.frame(x)
x = y
y %*% x
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
reducedTraining <- data.matrix(training) %*% data.matrix(model$rotation[,1:NAcceptable])
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
reducedTraining <- data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable])
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
data.frame(reducedTraining) <- data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable])
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
data.frame(reducedTraining) <- data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable])
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
reducedTraining <- data.frame(data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable]))
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
i
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
reducedTraining <- data.frame(data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable]))
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
print(i)
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
reducedTraining <- data.frame(data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable]))
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
print(i)
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
print(NAcceptable)
reducedTraining <- data.frame(data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable]))
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
print(i)
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
print(NAcceptable)
reducedTraining <- data.frame(data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable]))
reducedTest <- data.frame(data.matrix(reducedTest) %*% data.matrix(model$rotation[,1:NAcceptable]))
print("perform test on test data")
for (K in list(1,10,100))
{
test_pred <- knn(train = reducedTraining, test = reducedTest, cl = trainingClasses, k=K)
resultMatrix = CrossTable(x = reducedTest, y = testClasses, prop.chisq=FALSE, prop.r = FALSE, prop.c = FALSE, prop.t = FALSE);
sum(diag(resultMatrix$t))/sum(resultMatrix$t)
}
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
print(i)
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
print(NAcceptable)
reducedTraining <- data.frame(data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable]))
reducedTest <- data.frame(data.matrix(testData) %*% data.matrix(model$rotation[,1:NAcceptable]))
print("perform test on test data")
for (K in list(1,10,100))
{
test_pred <- knn(train = reducedTraining, test = reducedTest, cl = trainingClasses, k=K)
resultMatrix = CrossTable(x = reducedTest, y = testClasses, prop.chisq=FALSE, prop.r = FALSE, prop.c = FALSE, prop.t = FALSE);
sum(diag(resultMatrix$t))/sum(resultMatrix$t)
}
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
