}
training <- testData[-(1:validationIndex),]
return(list(test,training, validation))
}
allPersonsInCross <- function(input, Nfolds = 10)
{
testData <- input[sample(nrow(input)),]
result = list()
N = length(testData[,1])
for (i in 1:Nfolds)
{
start = N/Nfolds * (i-1) + 1
end = N/Nfolds * i
start
end
fold <- testData[start:end,]
}
return(fold)
}
#allPersonsInSplit(testData)
allPersonsInCross(testData)
testData = matrix(1:100,50,2)
testData = data.frame(testData)
allPersonsInSplit <- function(input, Nfolds = 10, NTestSize = 1, NValidationSize = 0)
{
testData <- input[sample(nrow(input)),]
N = length(testData[,1])
testIndex = NTestSize*N/Nfolds
validationIndex = testIndex + NValidationSize*N/Nfolds
test <- testData[1:testIndex,]
if (NValidationSize != 0)
{
validation <- testData[(testIndex+1):validationIndex,]
} else
{
validation <- NULL
}
training <- testData[-(1:validationIndex),]
return(list(test,training, validation))
}
allPersonsInCross <- function(input, Nfolds = 10)
{
testData <- input[sample(nrow(input)),]
result = list()
N = length(testData[,1])
for (i in 1:Nfolds)
{
start = N/Nfolds * (i-1) + 1
end = N/Nfolds * i
start
end
fold <- testData[start:end,]
result[[i]] = fold
}
return(fold)
}
#allPersonsInSplit(testData)
allPersonsInCross(testData)
testData = matrix(1:100,50,2)
testData = data.frame(testData)
allPersonsInSplit <- function(input, Nfolds = 10, NTestSize = 1, NValidationSize = 0)
{
testData <- input[sample(nrow(input)),]
N = length(testData[,1])
testIndex = NTestSize*N/Nfolds
validationIndex = testIndex + NValidationSize*N/Nfolds
test <- testData[1:testIndex,]
if (NValidationSize != 0)
{
validation <- testData[(testIndex+1):validationIndex,]
} else
{
validation <- NULL
}
training <- testData[-(1:validationIndex),]
return(list(test,training, validation))
}
allPersonsInCross <- function(input, Nfolds = 10)
{
testData <- input[sample(nrow(input)),]
result = list()
N = length(testData[,1])
for (i in 1:Nfolds)
{
start = N/Nfolds * (i-1) + 1
end = N/Nfolds * i
start
end
fold <- testData[start:end,]
result[[i]] = fold
}
return(result)
}
#allPersonsInSplit(testData)
allPersonsInCross(testData)
testData = matrix(1:100,50,2)
testData = data.frame(testData)
allPersonsInSplit <- function(input, Nfolds = 10, NTestSize = 1, NValidationSize = 0)
{
testData <- input[sample(nrow(input)),]
N = length(testData[,1])
testIndex = NTestSize*N/Nfolds
validationIndex = testIndex + NValidationSize*N/Nfolds
test <- testData[1:testIndex,]
if (NValidationSize != 0)
{
validation <- testData[(testIndex+1):validationIndex,]
} else
{
validation <- NULL
}
training <- testData[-(1:validationIndex),]
return(list(test,training, validation))
}
allPersonsInCross <- function(input, Nfolds = 10)
{
testData <- input[sample(nrow(input)),]
result = list()
N = length(testData[,1])
for (i in 1:Nfolds)
{
start = N/Nfolds * (i-1) + 1
end = N/Nfolds * i
result[[i]] = testData[start:end,]
}
return(result)
}
#allPersonsInSplit(testData)
allPersonsInCross(testData)
testData = matrix(1:100,50,2)
testData = data.frame(testData)
allPersonsInSplit <- function(input, Nfolds = 10, NTestSize = 1, NValidationSize = 0)
{
testData <- input[sample(nrow(input)),]
N = length(testData[,1])
testIndex = NTestSize*N/Nfolds
validationIndex = testIndex + NValidationSize*N/Nfolds
test <- testData[1:testIndex,]
if (NValidationSize != 0)
{
validation <- testData[(testIndex+1):validationIndex,]
} else
{
validation <- NULL
}
training <- testData[-(1:validationIndex),]
return(list(test,training, validation))
}
allPersonsInCross <- function(input, Nfolds = 10)
{
testData <- input[sample(nrow(input)),]
result = list()
N = length(testData[,1])
for (i in 1:Nfolds)
{
start = N/Nfolds * (i-1) + 1
end = N/Nfolds * i
result[[i]] = testData[start:end,]
}
return(result)
}
allPersonsInSplit <- function(input, Nfolds = 10, NTestSize = 1, NValidationSize = 0)
{
testData <- input[sample(nrow(input)),]
N = length(testData[,1])
testIndex = NTestSize*N/Nfolds
validationIndex = testIndex + NValidationSize*N/Nfolds
test <- testData[1:testIndex,]
if (NValidationSize != 0)
{
validation <- testData[(testIndex+1):validationIndex,]
} else
{
validation <- NULL
}
training <- testData[-(1:validationIndex),]
return(list(test,training, validation))
}
allPersonsInCross <- function(input, Nfolds = 10)
{
testData <- input[sample(nrow(input)),]
result = list()
N = length(testData[,1])
for (i in 1:Nfolds)
{
start = N/Nfolds * (i-1) + 1
end = N/Nfolds * i
result[[i]] = testData[start:end,]
}
return(result)
}
shufflePersons <- function(input, Npersons)
{
result = list()
N = length(testData[,1])
for (i in 1:Nfolds)
{
start = N/Npersons * (i-1) + 1
end = N/Npersons * i
result[[i]] = testData[start:end,]
}
sample(result)
return(rbind(result))
}
shufflePersons(testData, 10)
testData = matrix(1:100,50,2)
testData = data.frame(testData)
allPersonsInSplit <- function(input, Nfolds = 10, NTestSize = 1, NValidationSize = 0)
{
testData <- input[sample(nrow(input)),]
N = length(testData[,1])
testIndex = NTestSize*N/Nfolds
validationIndex = testIndex + NValidationSize*N/Nfolds
test <- testData[1:testIndex,]
if (NValidationSize != 0)
{
validation <- testData[(testIndex+1):validationIndex,]
} else
{
validation <- NULL
}
training <- testData[-(1:validationIndex),]
return(list(test,training, validation))
}
allPersonsInCross <- function(input, Nfolds = 10)
{
testData <- input[sample(nrow(input)),]
result = list()
N = length(testData[,1])
for (i in 1:Nfolds)
{
start = N/Nfolds * (i-1) + 1
end = N/Nfolds * i
result[[i]] = testData[start:end,]
}
return(result)
}
allPersonsInSplit <- function(input, Nfolds = 10, NTestSize = 1, NValidationSize = 0)
{
testData <- input[sample(nrow(input)),]
N = length(testData[,1])
testIndex = NTestSize*N/Nfolds
validationIndex = testIndex + NValidationSize*N/Nfolds
test <- testData[1:testIndex,]
if (NValidationSize != 0)
{
validation <- testData[(testIndex+1):validationIndex,]
} else
{
validation <- NULL
}
training <- testData[-(1:validationIndex),]
return(list(test,training, validation))
}
allPersonsInCross <- function(input, Nfolds = 10)
{
testData <- input[sample(nrow(input)),]
result = list()
N = length(testData[,1])
for (i in 1:Nfolds)
{
start = N/Nfolds * (i-1) + 1
end = N/Nfolds * i
result[[i]] = testData[start:end,]
}
return(result)
}
shufflePersons <- function(input, Npersons)
{
result = list()
N = length(testData[,1])
for (i in 1:Npersons)
{
start = N/Npersons * (i-1) + 1
end = N/Npersons * i
result[[i]] = testData[start:end,]
}
sample(result)
return(rbind(result))
}
shufflePersons(testData, 10)
testData = matrix(1:100,50,2)
testData = data.frame(testData)
allPersonsInSplit <- function(input, Nfolds = 10, NTestSize = 1, NValidationSize = 0)
{
testData <- input[sample(nrow(input)),]
N = length(testData[,1])
testIndex = NTestSize*N/Nfolds
validationIndex = testIndex + NValidationSize*N/Nfolds
test <- testData[1:testIndex,]
if (NValidationSize != 0)
{
validation <- testData[(testIndex+1):validationIndex,]
} else
{
validation <- NULL
}
training <- testData[-(1:validationIndex),]
return(list(test,training, validation))
}
allPersonsInCross <- function(input, Nfolds = 10)
{
testData <- input[sample(nrow(input)),]
result = list()
N = length(testData[,1])
for (i in 1:Nfolds)
{
start = N/Nfolds * (i-1) + 1
end = N/Nfolds * i
result[[i]] = testData[start:end,]
}
return(result)
}
allPersonsInSplit <- function(input, Nfolds = 10, NTestSize = 1, NValidationSize = 0)
{
testData <- input[sample(nrow(input)),]
N = length(testData[,1])
testIndex = NTestSize*N/Nfolds
validationIndex = testIndex + NValidationSize*N/Nfolds
test <- testData[1:testIndex,]
if (NValidationSize != 0)
{
validation <- testData[(testIndex+1):validationIndex,]
} else
{
validation <- NULL
}
training <- testData[-(1:validationIndex),]
return(list(test,training, validation))
}
allPersonsInCross <- function(input, Nfolds = 10)
{
testData <- input[sample(nrow(input)),]
result = list()
N = length(testData[,1])
for (i in 1:Nfolds)
{
start = N/Nfolds * (i-1) + 1
end = N/Nfolds * i
result[[i]] = testData[start:end,]
}
return(result)
}
shufflePersons <- function(input, Npersons)
{
result = list()
N = length(testData[,1])
for (i in 1:Npersons)
{
start = N/Npersons * (i-1) + 1
end = N/Npersons * i
result[[i]] = testData[start:end,]
}
sample(result)
return(result)
}
shufflePersons(testData, 10)
testData = matrix(1:100,50,2)
testData = data.frame(testData)
allPersonsInSplit <- function(input, Nfolds = 10, NTestSize = 1, NValidationSize = 0)
{
testData <- input[sample(nrow(input)),]
N = length(testData[,1])
testIndex = NTestSize*N/Nfolds
validationIndex = testIndex + NValidationSize*N/Nfolds
test <- testData[1:testIndex,]
if (NValidationSize != 0)
{
validation <- testData[(testIndex+1):validationIndex,]
} else
{
validation <- NULL
}
training <- testData[-(1:validationIndex),]
return(list(test,training, validation))
}
allPersonsInCross <- function(input, Nfolds = 10)
{
testData <- input[sample(nrow(input)),]
result = list()
N = length(testData[,1])
for (i in 1:Nfolds)
{
start = N/Nfolds * (i-1) + 1
end = N/Nfolds * i
result[[i]] = testData[start:end,]
}
return(result)
}
allPersonsInSplit <- function(input, Nfolds = 10, NTestSize = 1, NValidationSize = 0)
{
testData <- input[sample(nrow(input)),]
N = length(testData[,1])
testIndex = NTestSize*N/Nfolds
validationIndex = testIndex + NValidationSize*N/Nfolds
test <- testData[1:testIndex,]
if (NValidationSize != 0)
{
validation <- testData[(testIndex+1):validationIndex,]
} else
{
validation <- NULL
}
training <- testData[-(1:validationIndex),]
return(list(test,training, validation))
}
allPersonsInCross <- function(input, Nfolds = 10)
{
testData <- input[sample(nrow(input)),]
result = list()
N = length(testData[,1])
for (i in 1:Nfolds)
{
start = N/Nfolds * (i-1) + 1
end = N/Nfolds * i
result[[i]] = testData[start:end,]
}
return(result)
}
shufflePersons <- function(input, Npersons)
{
result = list()
N = length(testData[,1])
for (i in 1:Npersons)
{
start = N/Npersons * (i-1) + 1
end = N/Npersons * i
result[[i]] = testData[start:end,]
}
result = sample(result)
return(result)
}
shufflePersons(testData, 10)
testData = matrix(1:100,50,2)
testData = data.frame(testData)
allPersonsInSplit <- function(input, Nfolds = 10, NTestSize = 1, NValidationSize = 0)
{
testData <- input[sample(nrow(input)),]
N = length(testData[,1])
testIndex = NTestSize*N/Nfolds
validationIndex = testIndex + NValidationSize*N/Nfolds
test <- testData[1:testIndex,]
if (NValidationSize != 0)
{
validation <- testData[(testIndex+1):validationIndex,]
} else
{
validation <- NULL
}
training <- testData[-(1:validationIndex),]
return(list(test,training, validation))
}
allPersonsInCross <- function(input, Nfolds = 10)
{
testData <- input[sample(nrow(input)),]
result = list()
N = length(testData[,1])
for (i in 1:Nfolds)
{
start = N/Nfolds * (i-1) + 1
end = N/Nfolds * i
result[[i]] = testData[start:end,]
}
return(result)
}
allPersonsInSplit <- function(input, Nfolds = 10, NTestSize = 1, NValidationSize = 0)
{
testData <- input[sample(nrow(input)),]
N = length(testData[,1])
testIndex = NTestSize*N/Nfolds
validationIndex = testIndex + NValidationSize*N/Nfolds
test <- testData[1:testIndex,]
if (NValidationSize != 0)
{
validation <- testData[(testIndex+1):validationIndex,]
} else
{
validation <- NULL
}
training <- testData[-(1:validationIndex),]
return(list(test,training, validation))
}
allPersonsInCross <- function(input, Nfolds = 10)
{
testData <- input[sample(nrow(input)),]
result = list()
N = length(testData[,1])
for (i in 1:Nfolds)
{
start = N/Nfolds * (i-1) + 1
end = N/Nfolds * i
result[[i]] = testData[start:end,]
}
return(result)
}
shufflePersons <- function(input, Npersons)
{
result = list()
N = length(testData[,1])
for (i in 1:Npersons)
{
start = N/Npersons * (i-1) + 1
end = N/Npersons * i
result[[i]] = testData[start:end,]
}
result = sample(result)
return(result)
}
k = shufflePersons(testData, 10)
rbindlist(k, use.names=fill, fill=FALSE, idcol=NULL)
k
install.packages("data.table")
