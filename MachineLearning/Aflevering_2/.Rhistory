{
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
reducedTraining <- training %*% model$rotation[,1:NAcceptable]
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
x = matrix(1:4,2,2)
y = x
x = matrix(1:4,2,2)
y = data.frame(x)
y %*% x
x = matrix(1:4,2,2)
y = data.frame(x)
x = y
y %*% x
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
reducedTraining <- data.matrix(training) %*% data.matrix(model$rotation[,1:NAcceptable])
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
reducedTraining <- data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable])
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
data.frame(reducedTraining) <- data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable])
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
data.frame(reducedTraining) <- data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable])
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
reducedTraining <- data.frame(data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable]))
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
i
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
reducedTraining <- data.frame(data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable]))
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
print(i)
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
reducedTraining <- data.frame(data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable]))
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
print(i)
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
print(NAcceptable)
reducedTraining <- data.frame(data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable]))
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
print(i)
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
print(NAcceptable)
reducedTraining <- data.frame(data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable]))
reducedTest <- data.frame(data.matrix(reducedTest) %*% data.matrix(model$rotation[,1:NAcceptable]))
print("perform test on test data")
for (K in list(1,10,100))
{
test_pred <- knn(train = reducedTraining, test = reducedTest, cl = trainingClasses, k=K)
resultMatrix = CrossTable(x = reducedTest, y = testClasses, prop.chisq=FALSE, prop.r = FALSE, prop.c = FALSE, prop.t = FALSE);
sum(diag(resultMatrix$t))/sum(resultMatrix$t)
}
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
#--------------------------------------------
#--------------- Opgave 2.1.1.2
#--------------------------------------------
# for (data in list(allPersonsInSplit(id100Small), disjunctSplit(id100Small)))
# {
#
# }
data = allPersonsInSplit(id100Small)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
for (i in 1:length(leastVariances))
{
print(i)
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
print(NAcceptable)
reducedTraining <- data.frame(data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable]))
reducedTest <- data.frame(data.matrix(testData) %*% data.matrix(model$rotation[,1:NAcceptable]))
print("perform test on test data")
for (K in list(1,10,100))
{
test_pred <- knn(train = reducedTraining, test = reducedTest, cl = trainingClasses, k=K)
resultMatrix = CrossTable(x = reducedTest, y = testClasses, prop.chisq=FALSE, prop.r = FALSE, prop.c = FALSE, prop.t = FALSE);
sum(diag(resultMatrix$t))/sum(resultMatrix$t)
}
}
#
# getAcceptableVarianceRotationalMatrix(model, 0)
#
# plot(model$sdev, type = "o")
#
# variance <- model$sdev^2
# variance <- variance / sum(variance)
# plot(variance, ylim = c(0,1), type = "o")
#
# cumulativeVariance <- cumsum(variance)
# plot(cumulativeVariance, ylim = c(0,1), type = "o")
# ------------------------------- Windows (Desktop)   ------------------------------------------
{
ProjectLocation <- 'D:/Smartgit/8.-semester-gruppearbejde/MachineLearning/Aflevering_2/'
setwd(ProjectLocation)
folder <- "D:/SmartSVN/trunk/2018/group"
folder <- "D:/SmartSVN/trunk/preProcessed/2018/group"
}
# ------------------------------- Windows (Desktop)   ------------------------------------------
{
ProjectLocation <- 'D:/Smartgit/8.-semester-gruppearbejde/MachineLearning/Aflevering_2/'
setwd(ProjectLocation)
folder <- "D:/SmartSVN/trunk/2018/group"
folder <- "D:/SmartSVN/trunk/preProcessed/2018/group"
}
#load relevant functions
source('includes.R')
install.packages("jmotif", dependencies = TRUE)
#load relevant functions
source('includes.R')
source('functions.R')
load("DataFrames/id100Large.Rda")
#--------------------------------------------
#--------------- Opgave 2.1.1.2 a - all persons in
#--------------------------------------------
data = allPersonsInSplit(id100Large)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
listOfAccuracies <- matrix(,4,3)
listOfTimes <- matrix(,4,3)
listOfTimeVariation <- matrix(,4,3)
listOfNPCs <- matrix(,4,1)
timeSamples <- matrix(,10,1)
for (i in 1:length(leastVariances))
{
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
listOfNPCs[i] = NAcceptable
reducedTraining <- data.frame(data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable]))
reducedTest <- data.frame(data.matrix(testData) %*% data.matrix(model$rotation[,1:NAcceptable]))
cat("Number of principle components: ", NAcceptable, "\n")
kValues <- list(1,10,100)
for (K in 1:length(kValues))
{
cat("K-Vakues: ", kValues[[K]], "\n")
for (j in 1:10)
{
cat("j-Vakues: ", j, "\n")
start.time <- Sys.time()
test_pred <- knn(train = reducedTraining, test = reducedTest, cl = trainingClasses, k=kValues[K])
end.time <- Sys.time()
timeSamples[j] <- end.time - start.time
}
listOfTimes[i,K] <- mean(timeSamples)
listOfTimeVariation[i,K] <- sd(timeSamples)
#resultMatrix = CrossTable(x = testClasses, y = test_pred, prop.chisq=FALSE, prop.r = FALSE, prop.c = FALSE, prop.t = FALSE);
#result = sum(diag(resultMatrix$t))/sum(resultMatrix$t)
listOfAccuracies[i,K] <- acc(test_pred,testClasses)
}
}
print(listOfAccuracies)
write(listOfAccuracies,"1-2-a-accuracies.txt")
write(listOfTimes,"1-3-a-times-means.txt")
write(listOfTimeVariation,"1-2-a-times-stds.txt")
write(listOfNPCs,"1-2-a-NPCs.txt")
listOfTimes
listOfTimeVariation
listOfTimeVariation
listOfTimes
listOfAccuracies
Sys.time()
start.time
end.time
end.time - start.time
#--------------------------------------------
#--------------- Opgave 2.1.1.2 b - disjunct
#--------------------------------------------
data = disjunctSplit(id100Large)
training = data[[1]]
trainingClasses = training[,1]
trainingData = training[,-1]
test = data[[2]]
testClasses = test[,1]
testData = test[,-1]
model <- prcomp(trainingData)
leastVariances = list(0.8,0.9,0.95,0.99)
listOfAccuracies <- matrix(,4,3)
listOfTimes <- matrix(,4,3)
listOfTimeVariation <- matrix(,4,3)
listOfNPCs <- matrix(,4,1)
timeSamples <- matrix(,10,1)
for (i in 1:length(leastVariances))
{
variance = model$sdev
variance = variance / sum(variance)
cumulativeVariance = cumsum(variance)
acceptableFactorVariances = variance[1:(length(cumulativeVariance[cumulativeVariance < leastVariances[i]])+1)]
NAcceptable = length(acceptableFactorVariances)
listOfNPCs[i] = NAcceptable
reducedTraining <- data.frame(data.matrix(trainingData) %*% data.matrix(model$rotation[,1:NAcceptable]))
reducedTest <- data.frame(data.matrix(testData) %*% data.matrix(model$rotation[,1:NAcceptable]))
cat("Number of principle components: ", NAcceptable, "\n")
kValues <- list(1,10,100)
for (K in 1:length(kValues))
{
cat("K-Vakues: ", kValues[[K]], "\n")
for (j in 1:10)
{
cat("j-Vakues: ", j, "\n")
start.time <- Sys.time()
test_pred <- knn(train = reducedTraining, test = reducedTest, cl = trainingClasses, k=kValues[K])
end.time <- Sys.time()
timeSamples[j] <- end.time - start.time
}
listOfTimes[i,K] <- mean(timeSamples)
listOfTimeVariation[i,K] <- sd(timeSamples)
#resultMatrix = CrossTable(x = testClasses, y = test_pred, prop.chisq=FALSE, prop.r = FALSE, prop.c = FALSE, prop.t = FALSE);
#result = sum(diag(resultMatrix$t))/sum(resultMatrix$t)
listOfAccuracies[i,K] <- acc(test_pred,testClasses)
}
}
write(listOfAccuracies,"1-2-b-accuracies.txt")
write(listOfTimes,"1-3-b-times-means.txt")
write(listOfTimeVariation,"1-2-b-times-stds.txt")
write(listOfNPCs,"1-2-b-NPCs.txt")
listOfNPCs
listOfAccuracies
