{
if( x[i] == y[i] )
{
accu <- accu + 1;
}
}
return(100*accu/length(y))
}
# ------------------------------------------------------------------#
# Smoothing example code, this can be included in your code and will change the code so remember to
# load the images again, ( A nice feature of R )
smoothImage <- function(grayImg){ # This function is run in loadSinglePersonsData check the code
kernel <- makeBrush(9, shape='Gaussian', step=TRUE, sigma=0.8) # There exist a number of different functions
#print(kernel) # just to show what we have made
smoothed <- filter2(grayImg, kernel) # filter the image using the kernel
return(smoothed)
}
# ------------------------------------------------------------------#
# Example code for reading all images into a list, DPI 100
getAllData <- function(dataList){
#id <- data.frame()
idList <- list()
for(i in 1:length(dataList))
{
if( length(dataList[[i]]) > 0  ){
for(j in 1:length(dataList[[i]])){
idTemp <- loadSinglePersonsData(100,i - 1,j,folder)
idList <- append(idList, list(idTemp))
}
}
}
return(idList)
}
dataList <- list( list(), list(1,2,3), list(), list(), list(), list(), list(), list(), list(), list(), list(), list(), list(), list()  )
# ---------------------------1.4.1-----------------------------------#
# read image and perform knn
#folder <- "/home/anders/Desktop/workspace/STML/trunk/2018/group"
folder <- "/home/daniel/Desktop/trunk/2018/group"
dataList <- list( list(), list(1,2,3), list(), list(), list(), list(), list(), list(), list(), list(), list(), list(), list(), list()  )
idList <- getAllData(dataList)
# ---------------------------1.4.5-----------------------------------#
# Now try to apply k-nearest neighbor classification to the complete
# data set from all students attending the course. Distinguish two cases: Having data from all individuals
# in the training set and splitting the data according to individuals. Generate and explain the results.
# Clearing id
rm(id)
#Reset smoothing
smoothImage <- function(grayImg){ # This function is run in loadSinglePersonsData check the code
kernel <- makeBrush(9, shape='Gaussian', step=TRUE, sigma=sigma_values[1]) # There exist a number of different functions
#print(kernel) # just to show what we have made
smoothed <- filter2(grayImg, kernel) # filter the image using the kernel
return(smoothed)
}
{
dataList <- list( list(), list(1,2,3), list(1,2,3), list(1,2,3), list(), list(1,2,3,4,5), list(), list(), list(1,2,3), list(1,2,3), list(), list(), list(), list()  )
idList <- getAllData(dataList)
id <- list()
for(i in 1:length(idList)){
id <- rbind(id, data.frame( idList[i]))
}
listOfFolders5_2 <- c(1:10)
for(j in 0:9){
N <- 8000
id_test <- id[N*j+1:N*(j+1),-1]
id_train <- id[-(N*j+1:N*(j+1)),-1]
id_test_labels <- id[N*j+1:N*(j+1),1]
id_train_labels <- id[-(N*j+1:N*(j+1)),1]
id_test_pred <- knn(train = id_train, test = id_test, cl = id_train_labels, k=1)
listOfFolders5_2[j] <- acc(id_test_pred,id_test_labels)
}
}
#Reset smoothing
smoothImage <- function(grayImg){ # This function is run in loadSinglePersonsData check the code
kernel <- makeBrush(9, shape='Gaussian', step=TRUE, sigma=sigma_values[1]) # There exist a number of different functions
#print(kernel) # just to show what we have made
smoothed <- filter2(grayImg, kernel) # filter the image using the kernel
return(smoothed)
}
{
dataList <- list( list(), list(1,2,3), list(1,2,3), list(1,2,3), list(), list(1,2,3,4,5), list(), list(), list(1,2,3), list(1,2,3), list(), list(), list(), list()  )
idList <- getAllData(dataList)
id <- list()
for(i in 1:length(idList)){
id <- rbind(id, data.frame( idList[i]))
}
listOfFolders5_2 <- c(1:10)
for(j in 0:9){
N <- 8000
id_test <- id[N*j+1:N*(j+1),-1]
id_train <- id[-(N*j+1:N*(j+1)),-1]
id_test_labels <- id[N*j+1:N*(j+1),1]
id_train_labels <- id[-(N*j+1:N*(j+1)),1]
id_test_pred <- knn(train = id_train, test = id_test, cl = id_train_labels, k=1)
listOfFolders5_2[j] <- acc(id_test_pred,id_test_labels)
}
}
sigma_values <- c(seq(from=0.1, to=1, by=0.2), seq(1,3.5,0.5))
#Reset smoothing
smoothImage <- function(grayImg){ # This function is run in loadSinglePersonsData check the code
kernel <- makeBrush(9, shape='Gaussian', step=TRUE, sigma=1) # There exist a number of different functions
#print(kernel) # just to show what we have made
smoothed <- filter2(grayImg, kernel) # filter the image using the kernel
return(smoothed)
}
{
dataList <- list( list(), list(1,2,3), list(1,2,3), list(1,2,3), list(), list(1,2,3,4,5), list(), list(), list(1,2,3), list(1,2,3), list(), list(), list(), list()  )
idList <- getAllData(dataList)
id <- list()
for(i in 1:length(idList)){
id <- rbind(id, data.frame( idList[i]))
}
listOfFolders5_2 <- c(1:10)
for(j in 0:9){
N <- 8000
id_test <- id[N*j+1:N*(j+1),-1]
id_train <- id[-(N*j+1:N*(j+1)),-1]
id_test_labels <- id[N*j+1:N*(j+1),1]
id_train_labels <- id[-(N*j+1:N*(j+1)),1]
id_test_pred <- knn(train = id_train, test = id_test, cl = id_train_labels, k=1)
listOfFolders5_2[j] <- acc(id_test_pred,id_test_labels)
}
}
listOfFolders5_2
View(id_train)
id_train <- id[-(N*j+1:N*(j+1)),-1]
id_test <- id[N*j+1:N*(j+1),-1]
id_train <- id[-(N*j+1:N*(j+1)),-1]
j
id <- list()
for(i in 1:length(idList)){
id <- rbind(id, data.frame( idList[i]))
}
j
N <- 8000
id_test <- id[N*j+1:N*(j+1),-1]
id_train <- id[-(N*j+1:N*(j+1)),-1]
j=1
id_test <- id[N*j+1:N*(j+1),-1]
id_train <- id[-(N*j+1:N*(j+1)),-1]
j = 4
id_test <- id[N*j+1:N*(j+1),-1]
id_train <- id[-(N*j+1:N*(j+1)),-1]
j = 5
id_test <- id[N*j+1:N*(j+1),-1]
id_train <- id[-(N*j+1:N*(j+1)),-1]
j = 6
id_train <- id[-(N*j+1:N*(j+1)),-1]
id_test <- id[N*j+1:N*(j+1),-1]
id_train <- id[-(N*j+1:N*(j+1)),-1]
id_test_labels <- id[N*j+1:N*(j+1),1]
id_train_labels <- id[-(N*j+1:N*(j+1)),1]
N*j+1
N*(j+1)
length(N*j+1:N*(j+1))
lenght( id[-(N*j+1:N*(j+1)),-1])
length( id[-(N*j+1:N*(j+1)),-1])
length( id[-(N*j+1:N*(j+1)),])
source('~/Desktop/8-semester/Ex1/loadImage.R')
source('~/Desktop/8-semester/Ex1/functions.R')
# ------------------------------------------------------------------#
# Accuracy code, set labels and prediction as input, complicated method
acc <- function(x, y) {
accu = 0
for(i in 1:length(x))
{
if( x[i] == y[i] )
{
accu <- accu + 1;
}
}
return(100*accu/length(y))
}
# ------------------------------------------------------------------#
# Smoothing example code, this can be included in your code and will change the code so remember to
# load the images again, ( A nice feature of R )
smoothImage <- function(grayImg){ # This function is run in loadSinglePersonsData check the code
kernel <- makeBrush(9, shape='Gaussian', step=TRUE, sigma=0.8) # There exist a number of different functions
#print(kernel) # just to show what we have made
smoothed <- filter2(grayImg, kernel) # filter the image using the kernel
return(smoothed)
}
# ------------------------------------------------------------------#
# Example code for reading all images into a list, DPI 100
getAllData <- function(dataList){
#id <- data.frame()
idList <- list()
for(i in 1:length(dataList))
{
if( length(dataList[[i]]) > 0  ){
for(j in 1:length(dataList[[i]])){
idTemp <- loadSinglePersonsData(100,i - 1,j,folder)
idList <- append(idList, list(idTemp))
}
}
}
return(idList)
}
# ---------------------------1.4.1-----------------------------------#
# read image and perform knn
#folder <- "/home/anders/Desktop/workspace/STML/trunk/2018/group"
folder <- "/home/daniel/Desktop/trunk/2018/group"
# ---------------------------1.4.5-----------------------------------#
# Now try to apply k-nearest neighbor classification to the complete
# data set from all students attending the course. Distinguish two cases: Having data from all individuals
# in the training set and splitting the data according to individuals. Generate and explain the results.
# Clearing id
rm(id)
#Reset smoothing
smoothImage <- function(grayImg){ # This function is run in loadSinglePersonsData check the code
kernel <- makeBrush(9, shape='Gaussian', step=TRUE, sigma=1) # There exist a number of different functions
#print(kernel) # just to show what we have made
smoothed <- filter2(grayImg, kernel) # filter the image using the kernel
return(smoothed)
}
# Loading data
dataList <- list( list(), list(1,2,3), list(1,2,3), list(1,2,3), list(), list(1,2,3,4,5), list(), list(), list(1,2,3), list(1,2,3), list(), list(), list(), list()  )
idList <- getAllData(dataList)
# ------------------------------------------------------------------#
# Example code for reading all images into a list, DPI 100
getAllData <- function(dataList){
#id <- data.frame()
idList <- list()
for(i in 1:length(dataList))
{
if( length(dataList[[i]]) > 0  ){
for(j in 1:length(dataList[[i]])){
idTemp <- loadSinglePersonsData(100,i - 1,j,folder)
idList <- append(idList, list(idTemp))
cat("i: ", i, " j: ", j, "\n")
}
}
}
return(idList)
}
# Loading data
dataList <- list( list(), list(1,2,3), list(1,2,3), list(1,2,3), list(), list(1,2,3,4,5), list(), list(), list(1,2,3), list(1,2,3), list(), list(), list(), list()  )
idList <- getAllData(dataList)
id <- list()
for(i in 1:length(idList)){
id <- rbind(id, data.frame( idList[i]))
}
listOfFolders5_2 <- c(1:10)
j <- 5
N <- 8000
a <- N*j+1
b <- N*(j+1)
id_test <- id[a:b,-1]
id_train <- id[-(a:b),-1]
j <- 0
N <- 8000
a <- N*j+1
b <- N*(j+1)
listOfFolders5_2 <- c(1:10)
cat("j: ", j, "\n")
cat("j: ", j, "\n")
listOfFolders5_2 <- c(1:10)
for(j in 0:9){
cat("j: ", j, "\n")
N <- 8000
a <- N*j+1
b <- N*(j+1)
id_test <- id[a:b,-1]
id_train <- id[-(a:b),-1]
id_test_labels <- id[N*j+1:N*(j+1),1]
id_train_labels <- id[-(N*j+1:N*(j+1)),1]
id_test_pred <- knn(train = id_train, test = id_test, cl = id_train_labels, k=1)
listOfFolders5_2[j] <- acc(id_test_pred,id_test_labels)
}
listOfFolders5_2
id_test_labels <- id[a:b,1]
id_train_labels <- id[-(a:b),1]
cat("j: ", j, "\n")
N <- 8000
a <- N*j+1
b <- N*(j+1)
id_test <- id[a:b,-1]
id_train <- id[-(a:b),-1]
id_test_labels <- id[a:b,1]
id_train_labels <- id[-(a:b),1]
id_test_pred <- knn(id_train, id_test, id_train_labels, 1)
listOfFolders5_2[j] <- acc(id_test_pred,id_test_labels)
listOfFolders5_2
N <- nrow(id)/10
N
View(smoothImage)
#---------- CASE 1 ---------------------------------------------------------------------------------------------
#----- Dividing vertical -----#
# Loading data
dataListT <- list( list(), list(1,2,3))
idListT<- getAllData(dataListT)
idListOld <- idList
idList = idListT
idList <- idListT
#---------- CASE 1 ---------------------------------------------------------------------------------------------
#----- Dividing vertical -----#
# Loading data
dataListT <- list( list(), list(1))
idList<- getAllData(dataListT)
id <- list()
for(i in 1:length(idList)){
id <- rbind(id, data.frame( idList[i]))
}
folds <- createFolds(id$X1, k = 10)
listOfFolders5_1 <- c(1:10)
j = 1
cat("j: ", j, "\n")
id_train <- id[-folds[[j]],-1]
id_test <- id[folds[[j]],-1]
id_train_labels <- id[-folds[[j]],1]
id_test_labels <- id[folds[[j]],1]
id_test_pred <- knn(train = id_train, test = id_test, cl = id_train_labels, k=1)
listOfFolders5_1[j] <- acc(id_test_pred,id_test_labels)
listOfFolders5_1
mean5_1 <- mean(listOfFolders5_1)
std5_1 <- sd(listOfFolders5_1)
cat('mean5_1',mean5_1, '\t')
cat('std deviation 5_1',std5_1, '\n')
mean5_1 <- mean(listOfFolders5_1[1])
cat('mean5_1',mean5_1, '\t')
j <-0
listOfFolders5_2 <- c(1:10)
cat("j: ", j, "\n")
N <- nrow(id)/10
a <- N*j+1
b <- N*(j+1)
id_test <- id[a:b,-1]
id_train <- id[-(a:b),-1]
id_test_labels <- id[a:b,1]
id_train_labels <- id[-(a:b),1]
id_test_pred <- knn(id_train, id_test, id_train_labels, 1)
listOfFolders5_2[j+1] <- acc(id_test_pred,id_test_labels)
listOfFolders5_2
id_test_pred <- knn(id_train, id_test, id_train_labels, 1)
listOfFolders5_2[j+1] <- acc(id_test_pred,id_test_labels)
listOfFolders5_2[j+1] <- acc(id_test_pred,id_test_labels)
listOfFolders5_2
idList <- id[sample(nrow(idListT)),]
listOfFolders5_2 <- c(1:10)
cat("j: ", j, "\n")
N <- nrow(id)/10
a <- N*j+1
b <- N*(j+1)
id_test <- id[a:b,-1]
id_train <- id[-(a:b),-1]
id_test_labels <- id[a:b,1]
id_train_labels <- id[-(a:b),1]
id_test_pred <- knn(id_train, id_test, id_train_labels, 1)
listOfFolders5_2[j+1] <- acc(id_test_pred,id_test_labels)
listOfFolders5_2
id <- id[sample(nrow(idListT)),]
dataListT <- list( list(), list(1))
idList<- getAllData(dataListT)
id <- id[sample(nrow(idList)),]
dataListT <- list( list(), list(1))
idList<- getAllData(dataListT)
id <- id[sample(nrow(data.frame(idList)),]
id <- id[sample(nrow(data.frame(idList)),]
id <- data.frame(idListT)
id <- id[sample(nrow(id)),]
listOfFolders5_2 <- c(1:10)
dataListT <- list( list(), list(1))
dataList <- list( list(), list(1))
idList<- getAllData(dataList)
id <- data.frame(idList)
id <- id[sample(nrow(id)),]
listOfFolders5_2 <- c(1:10)
cat("j: ", j, "\n")
N <- nrow(id)/10
a <- N*j+1
b <- N*(j+1)
id_test <- id[a:b,-1]
id_train <- id[-(a:b),-1]
id_test_labels <- id[a:b,1]
id_train_labels <- id[-(a:b),1]
id_test_pred <- knn(id_train, id_test, id_train_labels, 1)
listOfFolders5_2[j+1] <- acc(id_test_pred,id_test_labels)
listOfFolders5_2
for(j in 0:9){
cat("j: ", j, "\n")
N <- nrow(id)/10
a <- N*j+1
b <- N*(j+1)
id_test <- id[a:b,-1]
id_train <- id[-(a:b),-1]
id_test_labels <- id[a:b,1]
id_train_labels <- id[-(a:b),1]
id_test_pred <- knn(id_train, id_test, id_train_labels, 1)
listOfFolders5_2[j+1] <- acc(id_test_pred,id_test_labels)
}
listOfFolders5_2
mean5_2 <- mean(listOfFolders5_2)
std5_2 <- sd(listOfFolders5_2)
cat('mean5_1',mean5_2, '\t')
cat('std deviation 5_1',std5_2, '\n')
folds <- createFolds(id$X1, k = 10)
listOfFolders5_1 <- c(1:10)
for(j in 1:10){
cat("j: ", j, "\n")
id_train <- id[-folds[[j]],-1]
id_test <- id[folds[[j]],-1]
id_train_labels <- id[-folds[[j]],1]
id_test_labels <- id[folds[[j]],1]
id_test_pred <- knn(train = id_train, test = id_test, cl = id_train_labels, k=1)
listOfFolders5_1[j] <- acc(id_test_pred,id_test_labels)
}
mean5_1 <- mean(listOfFolders5_1)
std5_1 <- sd(listOfFolders5_1)
cat('mean5_1',mean5_1, '\t')
cat('std deviation 5_1',std5_1, '\n')
#---------- CASE 1 ---------------------------------------------------------------------------------------------
#----- Dividing vertical -----#
# Loading data
{
dataList <- list( list(), list(1,2,3), list(1,2,3), list(1,2,3), list(), list(1,2,3,4,5), list(), list(), list(1,2,3), list(1,2,3), list(), list(), list(), list()  )
idList <- getAllData(dataList)
id <- list()
for(i in 1:length(idList)){
id <- rbind(id, data.frame( idList[i]))
}
folds <- createFolds(id$X1, k = 10)
listOfFolders5_1 <- c(1:10)
for(j in 1:10){
cat("j: ", j, "\n")
id_train <- id[-folds[[j]],-1]
id_test <- id[folds[[j]],-1]
id_train_labels <- id[-folds[[j]],1]
id_test_labels <- id[folds[[j]],1]
id_test_pred <- knn(train = id_train, test = id_test, cl = id_train_labels, k=1)
listOfFolders5_1[j] <- acc(id_test_pred,id_test_labels)
}
mean5_1 <- mean(listOfFolders5_1)
std5_1 <- sd(listOfFolders5_1)
cat('mean5_1',mean5_1, '\t')
cat('std deviation 5_1',std5_1, '\n')
#---------- CASE 2 -----------#
#---- Dividing horizontal ----#
# Using 2 person as test data, and 18 as training
# dataList <- list( list(), list(1))
# idList<- getAllData(dataList)
# idListOld <- idList
# id <- data.frame(idList)
# id <- id[sample(nrow(id)),]
# dataList <- list( list(), list(1,2,3), list(1,2,3), list(1,2,3), list(), list(1,2,3,4,5), list(), list(), list(1,2,3), list(1,2,3), list(), list(), list(), list()  )
# idList <- getAllData(dataList)
# id <- list()
# for(i in 1:length(idList)){
#   id <- rbind(id, data.frame( idList[i]))
# }
listOfFolders5_2 <- c(1:10)
for(j in 0:9){
cat("j: ", j, "\n")
N <- nrow(id)/10
a <- N*j+1
b <- N*(j+1)
id_test <- id[a:b,-1]
id_train <- id[-(a:b),-1]
id_test_labels <- id[a:b,1]
id_train_labels <- id[-(a:b),1]
id_test_pred <- knn(id_train, id_test, id_train_labels, 1)
listOfFolders5_2[j+1] <- acc(id_test_pred,id_test_labels)
}
mean5_2 <- mean(listOfFolders5_2)
std5_2 <- sd(listOfFolders5_2)
cat('mean5_1',mean5_2, '\t')
cat('std deviation 5_1',std5_2, '\n')
}
listOfFolders5_1
listOfFolders5_2
listOfFolders5_2_10 <- c(1:10)
listOfFolders5_2_10 <- c(1:10)
for(j in 0:9){
cat("j: ", j, "\n")
N <- nrow(id)/10
a <- N*j+1
b <- N*(j+1)
id_test <- id[a:b,-1]
id_train <- id[-(a:b),-1]
id_test_labels <- id[a:b,1]
id_train_labels <- id[-(a:b),1]
id_test_pred <- knn(id_train, id_test, id_train_labels, 10)
listOfFolders5_2_10[j+1] <- acc(id_test_pred,id_test_labels)
}
mean5_2 <- mean(listOfFolders5_2_10)
std5_2 <- sd(listOfFolders5_2_10)
cat('mean5_1',mean5_2, '\t')
cat('std deviation 5_1',std5_2, '\n')
mean5_2 <- mean(listOfFolders5_2_10)
std5_2 <- sd(listOfFolders5_2_10)
cat('mean5_1',mean5_2, '\t')
cat('std deviation 5_1',std5_2, '\n')
listOfFolders5_2_10
?predict
ProjectLocation <- '~/Desktop/8.-semester-gruppearbejde/MachineLearning/Aflevering_2/'
setwd(ProjectLocation)
folder <- "/home/daniel/Desktop/trunk/2018/group"
#load relevant functions
source('includes.R')
source('functions.R')
#load dataset
source('convertImages.R') # run only once
folder <- "/home/daniel/Desktop/trunk/preProcessed/2018/group"
#load relevant functions
source('includes.R')
source('functions.R')
#load dataset
source('convertImages.R') # run only once
# safe for later use
save(id100Small,file ="DataFrames/id100Small.Rda")
save(id100Large,file ="DataFrames/id100Large.Rda")
save(id200Small,file ="DataFrames/id200Small.Rda")
save(id200Large,file ="DataFrames/id200Large.Rda")
save(id300Small,file ="DataFrames/id300Small.Rda")
